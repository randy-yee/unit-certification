read("src/BabyStepGiantStep.py")
read("src/CompactRepresentation.py");
read("src/bounds.gp");
\\ Global variables
eps = 10^(-100);      \\ error tolerance
sqrt2 = sqrt(2);
DEBUG_CPCT = 0;
DEBUG_REDDIV = 0;

\\\\ BSGS functions
setInstanceVariables(readData)={
  K = nfinit(readData[1]);
  lglat = process_complex_loglattice(K ,readData[3]);
  reg1 = unscaled_determinant(K, lglat);
  r = K.r1+K.r2 -1;
  return([K, lglat, reg1,r]);
}

compute_precision(~K, ~lglat, ~reg1)={
    my(X1,X2,sumv = lglat[,1]);
    for(j=2, length(lglat), sumv+=lglat[,j]);
    X1 = prec_baby(poldegree(K.pol), log(abs(K.disc)), infinity_norm(sumv));
    X2 = prec_giant(poldegree(K.pol), log(abs(K.disc)),abs(reg1),infinity_norm(sumv) );
    print("BSGS precision ");print(ceil(X1), "   ", ceil(X2), "   ", max(ceil(X1),ceil(X2)));

    REQ_BSGS = ceil(max(ceil(X1),ceil(X2)));
    REQ_COMPARE = ceil((poldegree(K.pol)^2 +2)*log(infinity_norm(sumv))+2*poldegree(K.pol)^2 +5);
    eps = 2^(-REQ_COMPARE);
    return([REQ_BSGS, REQ_COMPARE,eps]);
}

scale_lattice_column(loglat, col, factor)={
    print("Scaling lattice column ", col, " by ", factor);
    copy_lattice = loglat;
    copy_lattice[,col] = factor*copy_lattice[,col];
    return(copy_lattice);
}

generateFileStrings(signature_string, suffixString, auxilliary)=
{
    outfilestring = strexpand("data/data-bsgs-",signature_string,suffixString);
    print("Output directed to file ", outfilestring);
    \\infilestring = concat(concat("input/test-poly-",signature_string),".gp");
    infilestring = concat(concat("input/polynomial-",signature_string),".gp");
    OUTFILE1 = outfilestring;

    if(length(aux) >1 && (type(aux[2]) == "t_STR"),
        OUTFILE1 = aux[2];
    );
    return([OUTFILE1, infilestring]);
}

outputInstanceInfo(fNum, K, lglat_new, reg1, signature_string, REQ_BSGS)={
    \\inputreg = unscaled_determinant(K,lglat_new);
    print("Input determinant ", precision(unscaled_determinant(K,lglat_new),10));
    write(OUTFILE1, "\n--------------------------\n", fNum, " Field pol: ", K.pol,
    ".  Sig: (", K.r1, ",", K.r2, ") -- Precision: ", ceil(REQ_BSGS));
    write(OUTFILE1, strprintf("%-20s %-20s %s\n%-20.9F %-20.9F %d\n", "Log(Disc) ", "Regulator: ", "Disc:", log(abs(K.disc)), reg1, K.disc));
    write(concat("data/table-bsgs-", signature_string), strprintf("%-20.9F %-20.9F %d", log(abs(K.disc)), reg1, K.disc));
}
\\# loop_range is a triple indicating the start, end and increment of the loop
\\# note tha the input files have a specific form, and the vector read in is always called data

\\# \param: signature_string is used to specify the read in file and the output file
\\# ex. "1-1", "1-2", "0-3" etc
\\# \param: loop_range is a length 3 vector which specifies which fields to compute on
\\# they are the arguments for forstep: ex. [3,7,2], will run fields 3,5,7 from data
\\# \param: b_ranges is a matrix of size n x 3, where each row is a triple of forstep arguments
\\# that specifies a range of babystock volumes
\\# each corresponds to the field number's ceiling mod 3 , only because this corresponds to a rough
\\# indicator of the discriminant size.
\\# auxilliary is an additional vector that will hold options.
\\ # currently, the only 1st position of aux, if present will correspond to the
\\# scanball size.
run_bsgs_experiment(signature_string, loop_range, b_ranges, auxilliary)=
{
    GP_ASSERT_EQ(length(loop_range),3);


    suffix = strexpand("(", loop_range[1], ",", loop_range[2], ")");
    [OUTFILE1, infilestring] = generateFileStrings(signature_string, suffix, auxilliary);

    read(infilestring);

    forstep(i=loop_range[1],loop_range[2],loop_range[3],
        timeout = 12*60*60*1000; \\12 hours
        \\# INSTANTIATES THE FIELD AND THE LOGLATTICE OF UNITS AND CPCT REPS
        [K, lglat, reg1, r] = setInstanceVariables(data[i]);
        \\# in case bnfinit is needed
        \\K1 = bnfinit(data[i][2],1); unit_index = random(length(K1.fu))+1;

        [REQ_BSGS, REQ_COMPARE, eps] = compute_precision(~K, ~lglat, ~reg1);
        default(realprecision, ceil(REQ_BSGS));

        lglat_new = lglat;

        outputInstanceInfo(i, K, lglat_new, reg1, signature_string, REQ_BSGS);

        cpct_units = cpct_from_loglattice(K, lglat_new, eps);

        scaleB = 2;          \\ 1 means you scan the whole region

        original_precision = default(realbitprecision);

        if(auxilliary[1] == 0,
            print("No scan radius specified. Auto-selecting");
            default(realbitprecision, 30);
            scanBallRadius = log( 7/sqrt( poldegree(K.pol) ))/2;
            default(realbitprecision, original_precision);
        ,
            scanBallRadius = auxilliary[1];
        );

        init = b_ranges[i,1]; end = b_ranges[i,2]; step = b_ranges[i,3];

        timeVector =List();         \\ use to track timing changes
        mintime = 0;
        minTimeIndex = 0;
        forstep (j = init, end, step,
            if(length(timeVector)>0,
                trials = length(timeVector);
                if(timeVector[trials][2] > timeout,
                    write(OUTFILE1, "runs exceed timeout. Break to next field");
                    break;
                );
            );

            \\scaling_variable = ((2^r)* log(abs(K.disc))^(1+j/den))/constscale ;
            scaling_variable = j;
            \\write(OUTFILE1, "\nscaling var = log(abs(disc))^(1+",j, "/",den,")*(2*r)/",constscale , "=",precision(scaling_variable,10));

            t9 = getabstime();
            bsgs_output= bsgs(K,cpct_units, scaleB, scaling_variable, bitprecision(scanBallRadius, REQ_BSGS), eps,REQ_BSGS, OUTFILE1, [timeout]);
            t10 = getabstime();

            bsgs_out_lattice = log_lattice_from_compact_set(K,bsgs_output);
            print("result regulator: ", precision(unscaled_determinant(K, bsgs_out_lattice),10));
            print("actual regulator: ", precision(reg1,10));
            write(OUTFILE1, "Overall   time: ",precision(t10-t9,10), "  In mins: " ,precision((t10-t9)/60000.0,10),"\n" );

            overallTime = t10-t9;
            listput(~timeVector, [j,overallTime]);
            if (j == init,
                timeout = min(timeout, max(2*(overallTime), 5*60000)  );
                minTimeIndex = j;
                mintime = overallTime;
            ,\\else
                if (overallTime > mintime,
                    minTimeIndex = j;
                    mintime = overallTime;
                    timeout = min(timeout, max(2*(mintime), 5*60000)  );
                );
            );
        );
    );
}

\\# loop_range is a triple indicating the start, end and increment of the loop
\\# note tha the input files have a specific form, and the vector read in is always called data
run_bsgs_experiment_scaling(signature_string, loop_range, b_ranges, auxilliary)=
{
    print("Function incomplete"); breakpoint();
    GP_ASSERT_EQ(length(loop_range),3);

    suffix = strexpand("(", loop_range[1], ",", loop_range[2], ")");
    [OUTFILE1, infilestring] = generateFileStrings(signature_string, suffix, auxilliary);

    read(infilestring);

    forstep(i=loop_range[1],loop_range[2],loop_range[3],
        \\# INSTANTIATES THE FIELD AND THE LOGLATTICE OF UNITS AND CPCT REPS
        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        [K, lglat, reg1] = setInstanceVariables(data[i]);

        \\# in case bnfinit is needed
        \\K1 = bnfinit(data[i][2],1); unit_index = random(length(K1.fu))+1;

        [REQ_BSGS, REQ_COMPARE, eps] = compute_precision(~K, ~lglat, ~reg1);
        default(realprecision, ceil(REQ_BSGS));

        \\
        \\  This takes the log lattice and modifies it so that we get a sublattice.
        \\  The modification depends on the 'latticetype', see function compute_sublattice
        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        \\latticetype = 0;
        \\[lglat_new,modpair1]=compute_sublattice(lglat, OUTFILE1, latticetype);
        \\print(precision(lglat_new,10), "\nMODPAIR", modpair1);

        \\ # can scale lattice columns to create index divisors
        \\ lglat_new = scale_lattice_column(lglat, 1, 15);
    );

}


\\ aux is for variable argument
\\ aux[1] specifies the epsilon value
\\ aux[2] specifies output string
\\ and empty list in single_range will sweep the range up to roughly sqrt(reg)
run_bsgs_experiment_single(signature_string, fieldnum, single_range, auxilliary)=
{
    timeout = 12*60*60*1000;
    suffix = strexpand("(", fieldnum, "_", single_range, ")");
    [OUTFILE1, infilestring] = generateFileStrings(signature_string, suffix, auxilliary);
    read(infilestring);

    forstep(i=fieldnum,fieldnum,1,
        \\# INSTANTIATES THE FIELD AND THE LOGLATTICE OF UNITS AND CPCT REPS
        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        [K, lglat, reg1,r] = setInstanceVariables(data[i]);

        \\# in case bnfinit is needed
        \\K1 = bnfinit(data[i][2],1); unit_index = random(length(K1.fu))+1;

        [REQ_BSGS, REQ_COMPARE, eps] = compute_precision(~K, ~lglat, ~reg1);
        default(realbitprecision, ceil(REQ_BSGS));

        print("REQBSGS", default(realbitprecision), "  ", ceil(REQ_BSGS));
        lglat_new = lglat;

        outputInstanceInfo(i, K, lglat_new, reg1, signature_string, REQ_BSGS);

        cpct_units = cpct_from_loglattice(K, lglat_new, eps);
        scaleB = 2;          \\ 1 means you scan the whole region

        \\scanBallRadius =1;
        original_precision = default(realbitprecision);

        \\# note that while scanBallRadius is computed to low precision,
        \\# when input to bsgs, it is wrapped in bitprecision(), which copies
        \\# it as a higher precision (extends with 0). This is needed otherwise
        \\# computations with scanBall radius get truncated
        if(auxilliary[1] == 0,
            print("No scan radius specified. Auto-selecting");
            default(realbitprecision, 20);
            scanBallRadius = log( 7/sqrt( poldegree(K.pol) ))/2;
            default(realbitprecision, original_precision);
        ,
            scanBallRadius = auxilliary[1];
        );
        my(init, end, stepsize);
        if (length(single_range) == 0,
            end = floor(sqrt(reg1));
            init = floor(end/50);
            stepsize = max(init, 1);
        ,
            init = single_range[1];
            end = single_range[2];
            stepsize = single_range[3];
        );
        print(init, " ", end, " ", stepsize);
        forstep (j = init, end, stepsize,
            \\scaling_variable = ((2^r)* log(abs(K.disc))^(1+j/den))/constscale ;
            scaling_variable = j;
            \\write(OUTFILE1, "\nscaling var = log(abs(disc))^(1+",j, "/",den,")*(2*r)/",constscale , "=",precision(scaling_variable,10));

            t9 = getabstime();
            bsgs_output= bsgs(K,cpct_units, scaleB, scaling_variable, bitprecision(scanBallRadius, REQ_BSGS), eps,REQ_BSGS,OUTFILE1, [timeout]);
            t10 = getabstime();

            bsgs_out_lattice = log_lattice_from_compact_set(K,bsgs_output);
            print("result regulator: ", precision(unscaled_determinant(K, bsgs_out_lattice),10));
            print("actual regulator: ", precision(reg1,10));
            write(OUTFILE1, "Overall   time: ",precision(t10-t9,10), "  In mins: " ,precision((t10-t9)/60000.0,10),"\n" );
            write(strexpand("bsgs-b-",sigstring, suffix), j, " , ",precision(t10-t9,10));
            if (j == init, timeout = min(timeout, max(2*(t10-t9), 30*60000)); );
        );
    );

}

guess_function(disc, deg, rank)=
{
    coeff = 1;
    ldisc = log(abs(disc));
    print(precision(ldisc,10));
    print(precision(coeff*exp(ldisc/(2^rank))^(1/4),10));
    print("\n");
    return();
}


specialField11 = [x^3 - 14105*x^2 + 190241206*x - 1434835874037, -22729311273742752391460247, \
[472127480231.19058564549342808743779377712964461705822041039616921390834216514742089426164608700285224539653227784071320317983861427662412196184167337903859099635926348062696842208555837034430238487927123938442366161078114770082570477123549304314589048301328471704975818132364412646228885384176662444724730776560094482623627653752559248545297505006989109270575275833095985203116970896510434270727118438348758227920519567635721951088609069754806222097445919409332199539366007538296928313392888844385975 + 6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983*I; -472127480231.19058564549342808743779377712964461705822041039616921390834216514742089426164608700285224539653227784071320317983861427662412196184167337903859099635926348062696842208555837034430238487927123938442366161078114770082570477123549304314589048301328471704975818132364412646228885384176662444724730776560094482623627653752559248545297505006989109270575275833095985203116970896510434270727118438348758227920519567635721951088609069754806222097445919409332199539366007538296928313392888844385975 + 11.526005437528880337782384385123881089305298628901839535194975994927139034023654804794481258060837178537264612315098878730595190738165646846292171903515321479572585447781821209483527129178419194846600993280189034503894833762207375482528939811527790171178887104147603199155128340767552782934004910134236850448872574047836334223126587696428309062265188586148249612363345771382750511289965920273871747740817197899585290137242538418885207949771433323603174743205482689468297695044620521350987572083827597*I]];
{

specialField30 = [x^3 - 75498*x^2 + 1680279841*x - 11308481410487, 20588425792664626980132449, \
[371148.25103310256966453964730327803928545022729495216302508628256872297237054788826750776010068758174518332163918389780075653472927630658880199153790572579499382394088516041352584450520705255894997851522945434126458369063039810862003079819746758150660317138165348546466707783135896377638484615850216474219250126419124400044753632092648289195992376434626566424506030283155296912092231674605031939516977340036852053253137610661428292603623427259981203254434514572899444978878676659495592867357793115136 + 1.1253584242118130320 E-694*I, 507707.91102222347698083838234323742028154550500841537861200856150736619812197190172131611521661609275373190868698653129734217516817366138142931800877010442640044244037722181157916314244096578793391875439852004223386900445298957546938578896524629268664510857718560839135553301248338386914250136378297262099699463212035088437511341921041856834788539488484036995335123934567184829285429206816115086439505475996273662233774015008215903710985686023318599530692603238885868422343167303817762023164535725665 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I; -387290.38195408775202175803377179786936418551463946781908833212430459669789095559821563927726326509671636620038078654816653761739696625149724845407997445145536008106355250782263243557007160749524176354854573415461244799104107844757583893341912102826249356851138815736611930946825860972523742237915634501102487499440221736466151476585951660524877106242321280183408754949035486348873367652729587196914982980190403030082867633125888196525310247965974213243472079330219233333159459028488150181732978779962 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I, 453272.87391710002175566353703854009408358985520738640982244571359076944409648085384198003798103429716194550996518009540235136147498080199772861331771299778765697369882614194005561890540355850694911710354529407088813261872541074831463786660769780248536403244254231660887070338111054975278062573298255672582769292792322884045836155223485732124109237250868236831806087850149436729824264124652810522282706041460398269529977798669063784768577201869642776229992966363213474156349420136789021653428932779297 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I; 16142.130920985182357218386468519830078735287344515656063245841735873725520407709948131517162577514971182878741602650365781082667689944908446462542068725660366257122667347409106591064864554936291785033316279813347864300410680338955808135221653446755890397129734671901452231636899645948852576220654180268832373730210973364213978444933033713288847298076947137589027246658801894367811359781245552573980056401535509768297300224644599039216868207059930099890375647573197883542807823689925573143751856648261 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I, -960980.78493932349873650191938177751436513536021580178843445427509813564221845275556329615319765038991567741865216662669969353664315446337915793132648310221405741613920336375163478204784452429488303585794381411312200162317840032378402365557294409517200914101972792500022623639359393362192312709676552934682468756004357972483347497144527588958897776739352273827141211784716621559109693331468925608722211517456671931763751813677279688479562887892961375760685569602099342578692587440606783676593468504962 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I]];

specialField40 = [x^4 - 716*x^3 + 164632*x^2 - 12722131*x + 212364731, 73207246861319109539698517, \
[6061.7777125926362445835851632875416221836779355940788152677969404825737213904323773851610570690040080007169619760344243486728128709246534926253623069571075500674188394196958571061213750786030299049581755803140908828040473046315101940542492684450971791131812450532037084031873389855170145765380630981419974628989955671746665102209201428716287674004632746508899628568955111778993222614552620265267980186635949186007144443699780237678155385204791 + 1.08583322703270845029911236857200407395 E-405*I, -1481.98398295182931832213286526231571870708628986524490535857825291199235255542286845683774492101925125042541246431380293315543660349853573396560029937871055283129840344971796127571004122255175738943615806930287535318347628157839540417396201782077681449618762128334738842621139142463476736040320064846807465272361785913747614774715887805571577678378163157620151687468685824050039866669197242802424342999064480097342183125885973619381782626975521 + 6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661114513780091951036380490021936107158751*I, 5615.0581550445460424672157125478128682189830114540621313045488887518983952875308952729337586528724642328966186856615616755711766023230282815078496159292531656597186263233584569236899252853160061235456599943358314995856696022590505458768228095048268510443209022929774505325855184563085738552397783474554679030999202015036355455051475736996180477927222971366693659636047445559411885668048869525273284295038890592645008764527459801430706251641224 + 6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661130107117832683801057859335688990611821*I; 1041.646497325773175749487370064423931631205042159724854527699606239576262241970046540824579994578216387700974731773560062938969058742040279754194485972440118107757217767721439768276758001956343540352780034239037470739650547393827151302499956752500902588568763588895106324260410051208950088132811079025919232879778910349997859971113423520162395542515157833152012095718062923277236999212497525607568610742725162956198394765410 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330580287415677794164745190650006844106702*I, 6868.386210004924028941409762633679813570046045605573460304429354627870361630700498007024918136525990117502615857468582287874794893810504502651893992172965248301729267466586261673278039460069452646818883711827937182380248778390198484192761982286760601741063053611770506007682178115092881205726830801084374434195946474379207215713246291995450614962514100715438013358136631040141693510604541521417541015793811803318503781989868 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330551126762483609982149115789108955944749*I, -6090.332365537015515990541570202574565027593193407062265205498289208553845960196748525001727008851608838921794852712579134691036786652365904279570589729568739803535641921697362502731377954726484766146361641179199942509349492580618191107778905078934552727353995594076505987657894862805003386063576368166596757386761735788713967416631585597346104132904449306954162675436685301007881890379565348360635979766157052896422834163891 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330562017578694663431799952629417086514249*I; -6282.6184937227751316622013702951655255702699916376863866167269885659215082594514790266467601956198636695359374416128776304209659438806677825706507009158287855250262310293405627027924393901539242799279546788047859095326059654247059194033443364559109850754415813302147461482298440143324293693632154671346422347531650664040436884082912088541179800912823145100176795739660797732635496609270899129223495470017163391524952899817134805013879481776435 + 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092230474532810252977406661881550170096703*I, 790.34933969676748330124724569850185025977669021129116727007642253723850432703857143258125905409658536744104701933472304757479775928589421716532174165998627680092772612615314235910770401562196995572993849505249887412091058841547343132499662798072692756955781317889261746038069367945517785947989402685529689074220736196661346293493388611662193939942180755843524481857101343012288292905860776733644974633328241141734574173573914908513092195686481 + 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617302656461329418768921910116446345071881625696223490056820540387704221111928924589790986076392885762195133186689225695129646757356633054240381829129713384692069722090865329642678721452049828254744917401321263117634976304184192565850818343072873578518072002266106109764093304276829390388302321886611454073151918390618424603221604724657577954658556263442978*I, 5547.5058933133894439202397651430798724437068150811626576122859110738101161192586748962346349923099949015007427845960221532839634076750309694198641533687160716822269789649467291182254596658287884330455990194488222055827582098975693705858672527702023169171992854319423247749577269658320447804517388015842210147114801076586167122989778811212643114814172074453557654879500864811306373678305607876175675383664948778629831430144582307013604224044994 + 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617302656461329418768921910116446345071881625696223490056820540387704221111928924589790986076392885762195133186689225695129646757356633054240381829129713384692069722090865329642678721452049828254744917401321263117634976304184192565850818343072873578518072002266106109764093304276829390388302321886611454073151918390618430973224084220195734715045040375988561*I; -820.8057161956342886708711630568000282446129861161172831787695581562284753729509448993388768679623607188819992661951067811908159857860259898089060920137188826501498261580767341716056936904054491653830009357483424440110918866006314259534048887416870966263084273118840685792179050223935352953076587100332744610256094111206206817837423575376731828516961179740242953786474943279130095997406696392120170824046037424044175491536744 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530922102631442353878030*I, -6176.751566749862193920524143069865945122736445951619722215927524253116513402316200982768432269603324234518250412489502402294156049597862985851615434454240972271358590143021442756675702253139665213112664137577560703317683085227276511343796592446710714814433245507315735041851480369913291704803524179471596672214535977208344530901021300056356777578154276697671741302020786229764177772971176860729747332136449413762427692466748 + 6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843021390217995818798*I, -5072.231682820919970396913907488318175635096633128162523711336510617154665446592821644166666636330850295475566617545004694164103223345693346648143179568400497538409963366607823539184006996418309790444897372605453762659078319576001725354911157196094615234166192130843269319885350559335615249627940780873092160424638573373538290387493869223536255141235055275070968776118145736063944044255882391784259988104226884231061185303313 + 6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843398379726471003131*I]];
