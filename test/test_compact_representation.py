{
read("src/CompactRepresentation.py");
read("src/BSGSHelper.py")
\\ If using Alltest.gp, the file reads below are not needed, but the tests
\\ depend on these files
\\ read("src/VectorMethods.py");
\\ read("src/Neighbours.py");
}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\ test cases for compact_rep and compact_reconstruct
{
    my(G1, G2, O_K, n, eps = 10^(-9));
    G1 = nfinit(x^5 - 15*x^4 + 56*x^3 - 65*x^2 + 48*x - 15);
    G2 = bnfinit(x^5 - 15*x^4 + 56*x^3 - 65*x^2 + 48*x - 15);

    print("--Cpct Rep: test case - Signature ", G1.sign);
    n = poldegree(G1.pol);
    O_K = matid(n);
    logarithm_lattice = get_log_lattice_bnf(G2);
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    logarithm_lattice = matconcat([logarithm_lattice; extra_log_coords]);

    for(i=1, length(G2.fu),
    \\print(precision(logarithm_lattice[,i]~,10));
        cpct_rep = compact_rep_full_input(G1, logarithm_lattice[,i]~, O_K , eps);
        numComponents = length(cpct_rep[1]);
        alphafinal = 1;
        for(j=3, numComponents,
            intermediate = nfeltdiv(G1, cpct_rep[1][j], cpct_rep[2][j]);
            intermediate = nfeltpow(G1, intermediate, 2^(numComponents-j));
            alphafinal = nfeltmul(G1,alphafinal, intermediate);
            \\print("(alpha/d)^",2^(numComponents-j), " ", intermediate, "\nintermediate product: ", alphafinal);
        );
        GP_ASSERT_EQ(vec_flip_positive(compact_reconstruct(G1, cpct_rep[1], cpct_rep[2])), vec_flip_positive(nfalgtobasis(G1, G2.fu[i])) );
    );
}

{
    print("--Cpct Rep: test case 1 - bad approximation input");

    my(G1, G2, O_K, n, eps = 10^(-9));
    G1 = nfinit(x^3 - 85*x^2 + 2750*x - 21391);
    G2 = bnfinit(x^3 - 85*x^2 + 2750*x - 21391);
    n = poldegree(G1.pol);
    urank = G1.r1 +G1.r2-1;
    O_K = matid(n);
    alpha_OK =  [1, 0, 177/2561; 0, 1, 1736/2561; 0, 0, 1/2561];
    alpha = [29.439979023720722516, -21.591825937521197272];

    \\#print("A poor precision causes cpct rep to fail.");
    alpha1 = [29.437500000000000000000000000000, -21.593750000000000000000000000000000000];
    epsilon = 1/256;
    logarithm_lattice = get_log_lattice_bnf(G2);
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    logarithm_lattice = matconcat([logarithm_lattice; extra_log_coords]);

    cpct_rep = compact_rep_full_input(G1, alpha, alpha_OK , epsilon,1,2);
    \\#print( precision(log_from_cpct(G1, cpct_rep),15));print( precision(alpha,15));

    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_rep)[1..urank], alpha[1..urank], 1/10000);
}

{


print("--Cpct Rep: test case 2 - bad approximation input");

    my(G1, G2, O_K, n, eps = 10^(-9));
    G1 = nfinit(x^5 - x^4 - 16*x^3 - x^2 + 32*x + 9);
    G2 = bnfinit(x^5 - x^4 - 16*x^3 - x^2 + 32*x + 9);
    n = poldegree(G1.pol);
    urank = G1.r1 +G1.r2-1;
    O_K = matid(n);
    alpha_OK =  [1, 0, 0, 0, 6/43; 0, 1, 0, 0, 128/129; 0, 0, 1, 0, 91/129; 0, 0, 0, 1, 89/129; 0, 0, 0, 0, 1/129];
    alpha = [-1.94007873535156250, 2.884353637695312500000000000000000000000000, 0.46249389648437500000000000000, -1.9906616210937500000, 5.443695068359375000000000000];

    \\print("alpha1 is a poor approximation, causing incorrect behaviour in cpct_rep");
    alpha1 = [-1.9414062500000000000000000000000, 2.8828125000000000000000000000, 0.46093750000000000000000000000, -1.9921875000000000000000000000000, 5.4453125000000000000000000];
    epsilon = 1/256;
    logarithm_lattice = get_log_lattice_bnf(G2);
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    logarithm_lattice = matconcat([logarithm_lattice; extra_log_coords]);

    cpct_rep = compact_rep_full_input(G1, alpha, alpha_OK , epsilon,1,2);
    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_rep)[1..urank], alpha[1..urank], 1/10000);
}



{ \\ test cases for compact_rep_full_input and cpct_from_loglattice

    my(G1, G2, O_K, n, logarithm_lattice, cpct_rep,cpct_list, eps = 10^(-9));
    G1 = nfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31);
    G2 = bnfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31);
    print("--Cpct Rep: test case - Signature ", G1.sign);
    n = poldegree(G1.pol);
    O_K = matid(n);
    logarithm_lattice = get_log_lattice_bnf(G2);
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    logarithm_lattice = matconcat([logarithm_lattice; extra_log_coords]);
    for(i=1, length(G2.fu),
        cpct_rep = compact_rep_full_input(G1, logarithm_lattice[,i], O_K , eps);
        GP_ASSERT_EQ(vec_flip_positive(compact_reconstruct(G1, cpct_rep[1], cpct_rep[2])), vec_flip_positive(nfalgtobasis(G1, G2.fu[i])) );
    );

    cpct_list = cpct_from_loglattice(G1, logarithm_lattice[1..G1.r1+G1.r2-1, ], eps);
    for(i=1, length(G2.fu),
        GP_ASSERT_EQ(vec_flip_positive(compact_reconstruct(G1, cpct_list[i][1], cpct_list[i][2])), vec_flip_positive(nfalgtobasis(G1, G2.fu[i])) );
    );
}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\ Testing conversion from logarithm to compact representation
\\ with large-ish values
{
    print("--Cpct Rep: test case - Largish input ");
    my(G1, G2, O_K, n, r, logarithm_lattice_c, cpct_rep,
        log_lattice, cpct_units, eps = 10^(-20)
    );
    G1 = nfinit(x^4 - 63*x^3 + 1511*x^2 - 18407*x + 96112);
    n = poldegree(G1.pol); r= G1.r1 +G1.r2-1;
    O_K = matid(n);
    logarithm_lattice_c = [210.01257976391203893466190188644651857896618450772345225780758030094649548352927962886818821063260267400565817047420206542194373776680112841515033859856943324766060626033948056201463150219267337617312829322922329212177865382088320971294457418404553877789010614790701130884847909385131275892021229865020567436650477623156208571148264643071674748224623775990587506873395919676950723122270586580942767802995995683273164179245651679870546997731569932609844789790681103644946695521669502283966006529081666, 2902.2976164880011351015314530238996773850505370510354508715195427470307594298272063664748790816502570276733724432323062236665288417985095413173612375789013829376987273451306433861013601212110098886180587688039735446351521060925094984036914074012445317466735916250141896871309150890395977215642783083421491165639303270586019990655347735803209562494694803205337438078543266589267646758379076803325679570445166445871056750673755088962945031491087553555529120291419014670282042189027804998485639999518006 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I; 1160.5476705038556567723528240230680552423815522461263422442031431707060118361195501146674160703622547083440115349928592647429090820913203785336236334334911950656823803924200126511798023520514140645938320693111715144633091562114702918001318166600110093642810871454227076528513064270640795401313965498590574154881009792649111512316398268135430836567606381962160057310869284508126006060196003575358487509388253178836259306082413649272509590928167747951458196366120070206398302356116187680187549914306026 + 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491*I, -1574.9187341945561002025578544798158082547070686545891412555263112593422861732425480175518007606430244379112080231070809454287863111326450221592500302332032280086178140331663931843978719738746189069009211212382032569269001274595753569378679584561294193327900387147807826883701058232703862847621249060919409479684265690592261925535821409760164236597701364788850827694679976202614765710860838348307920910534967771839755115630872519135587576056088306376581710377082467057356267834102047878461640588811784; -1370.5602502677676957070147259095145738213477367538497945020107234716525073196488297435356042809948573823496697054670613301648528198581215069487739720320606283133429866527594932131944338542440874407669603625403948065850878100323535015130763908440565481421711932933297189616997855209153922990516088485092630898546057554964732369431224732442598311390068759561218807998208876475821078372423062233452764289687852747163575724006978817259564290701324741212442675345188180570892971908283137908584150567214193 + 5.9175003744750621748369732401510580543764697854584319365951981814561003714433563138740381422287174298557204550681014099573400082109368105548071287136696708696622439474052398840341739086634326066672745880731254664290278547583197141965059675990389621273790662456273436365425917032133256854979835171790417318163772568186851182627536480240438228205034940781823598754760279574718392142641677568467354381135156683847989115069935286449397615898727790033516123591883004494173779387868558766221181296400259110*I, -1327.3788822934450348989735985440838691303434683964463096159932314876884732565846583489230783210072325897621644201252252782377425306658645191581112073456981549290809133119642502017034881473363909817171376475657702877082519786329341414658234489451151124138835529102334069987608092657692114368021534022502081685955037579993758065119526326043045325896993438416486610383863290386652881047518238455017758659910198674031301635042882569827357455434999247178947409914336547612925774354925757120023999410706222 + 8.0042765913551908222784600254506581706948689567907772060027408959452406069021508688322870483082454607724242428482757350257853742417182479816351742345919496581035969157769219119606661856486329839346550155368184486278740886537486004354207692554255533589059777500258665416438272845706173000231879303154404622362061118721040888886652534329553018510304844721089605312040072212357577562242700289705288297275471311142846759429927183151461682699995392833820195087218321995643111862992020832738787896478718334*I];
    log_lattice = process_complex_loglattice(G1, logarithm_lattice_c);
    cpct_units = cpct_from_loglattice(G1,log_lattice,eps);

    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_units[1])[1..r], log_lattice[,1], eps);
    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_units[2])[1..r], log_lattice[,2], eps);

    \\ test a larger multiple
    power = 50000;
    large_unit = concat(log_lattice[,1], extra_log_coordinate(G1.r1, G1.r2, log_lattice[,1]));
    large_unit = power*large_unit;
    cpct_rep = compact_rep_full_input(G1, large_unit, O_K, eps);

    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_rep)[1..r], large_unit[1..r], eps);

}

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\ testing computation of logarithm lattice from set of compact representations
\\ and back: log_lattice_from_compact_set  cpct_from_loglattice
{
    print("--Cpct Rep: test case - lattice conversion and back. ");
    my(G1, G2, O_K, n, r, logarithm_lattice_c, cpct_rep,
        log_lattice, cpct_units, eps = 10^(-20)
    );
    default(realprecision, 1000);
    G1 = nfinit(x^3 - 19741925*x^2 + 120103691061458*x - 220179916278591690030);
    \\ disc = 3775823795898978972166892739185847878552
    n = poldegree(G1.pol); r= G1.r1 +G1.r2-1;
    O_K = matid(n);
    logarithm_lattice_c = [3416487913.44132289445315000133236746429077631685413607147808838430974646616023144297271361617068313668766560777951328161950224891389884881371365056415488106140759134792376542360675330681475091566346446760376880523032181376207545367617042487468146754804302820827672963958318699610579550289785445414169089535991976727037962298275099153813814322851163693410567878306175583471419942971184997543998138923079299569223292353362012217529735272682628484415536150886991848487290425633515998154335222697972786536855732596340643814097583174933135622106706633168486635139732548664122673753308004417505036948675556204030432403831409064262818620633464798064371946608022692297529606354904059301974382169956950396131142624086000116711210368865795651234084667499766942152550032019865885864483610919266362058437873504186401991083706240457303743706359148449783619982280806736459828250272446211056291956151417803573948045200899070171855174931595534454903162348017451555956571569131929603903259476173843654086386729145412660377997551197622013629155900243834581135815278578478094708044105250173582683621407556002347033517053767295915918728012063033500710928781135554989787221723740496566281802686821912450566059902190701472431910956044702154240988854008192479453936862557630610767671071413023454764597884201915579772017044938823025286505111631692780746562714359455776278634561240711701822717004086506889876706181330821202928665142613111904074607521334174964412323528610123583614949104936700910028941512711526915834722270917418362461654935690870416379492688383214275944653245337829501758029540534761733365660596914011975766506369634866061008852720051400380491169679148220380313063656303830681425661977310237659645400208383205179951590530460019397541216150763090777145174447026418965054447214337414918416901983861645279932283066564524802816893129679271249979783769865974039532478733300675611901884433039122112062121504796045419921525017318433515025904974155952741382543411902496150187519177832712166254483875692613242431789971608194165849461954405522495293288378303464594396550217273994760087578280933938584780732190545003175765316859688513279751930154684903140984248225712421412089308167090959025380907158315653991418854395728783027347195369757056510780978527895963605688620800607031534455637150099455352224843769139234148529411130300840117552295042750302633091606577704269429810081765093753414877537155076744229787311331950451301368600993903557078669958220800331950955367469353753127621561229037919903695921562422219744885668141367438126622721225722678097452047394338807691618716677458040147249956804959186637038867016245421019848136209232530758237773516554152314220017582766030258999677811231716499042744670906424277169308740824953897848288913662644602949822276743665857724729257815470258980409726654401586841733655840396996650152183782096991764095614518933127015617231280046751492737412914096709065705169266078296940737743678145545437301128402239285405459887709007266010794012047120051640001374808314236212931850181384831 + 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617302656461329418768921910116446345071881625696223490056820540387704221111928924589790986076392885762195133186689225695129646757356633054240381829129713384692069722090865329642678721452049828254744917401321263117634976304184192565850818343072873578518072002266106109764093304276829390388302321886611454073151918390618437223476386522358621023709614892475992549913470377150544978245587636602389825966734672488131328617204278989279044947438140435972188740554107843435258635350476934963693533881026400113625429052712165557154268551557921834727435744293688180244990686029309917074210158455937851784708403991222425804392172806883631962725954954261992103741442269999999674595609990211946346563219263719004891891069381660528504461650668937007052386237634202000627567750577317506641676284123435533829460719650698085751093746231912572776470757518750391556371556106434245361322600385575322239181843284039787619051440213097172655773187230676365593646060390407060370593799154724519882778249944355056695826303114971448490830139190165906623372345571177815019676350927492987863851012080185540334227801969764802571672320712741532020942036388591119239789353567489889651075954945369420809506929241609336851813898258662735405797830420950432411393204811607630038702250676486007117528049499294652782839854520853984559356470956327201868344328243984917263006057236594911141349967701098917717385399138185442159501860591064233068997440551192047296133099823976366959550713273961485308505572510363683514934578195554558760016329412003229049838434643442954470028288394713709632272231470510426695148369893687704664781478828666909552483372503796713897112419843844436854510050851377534358098920330693360997725446558357217156876765593595336290820190776757272190136012845025041023478596979216825697725389120848393057004442132237261348855724407838989009424742757392191272874383457493552931514792482778173166529199162678095605518019893152815790253893679670519141965164524104497881545343895653696520295398180528027278887491061013640699250490349879930286285961838131850187444339292303141971677482119577191954595099786032350785693627653736773788554831198371185049190791886209994504936169197454728939169730767347244525219824921610248776878090248827309952556159543138287199540025923217888338973711169681270684414445165697729631691205701203368547890453493535779050427704509990933345564797291319223270977246115491299607118726913634864822503015213895890219319218805045775942178629133827373445749788112020300661723585736184174952183564987717801942981935197052273109956378625956964336599789744531760971512802854095511026475928290304749246872908571688959053173564210228270947147904622685433220427193907246288590496987437422029153080718055986880748401462115707812439677489561695697936664289142773750388701286043690638209696201074122936134983855638239587990412283932685750888128749024743638435999678203183912362935028538247949788181437298846392*I, -4244728386.36407780780212290795139906493357807904713751812617789876405092600832348590743857759989904757851667432803369055868601324152797403445460810426702165617480561286727406705958557090442584064895116185117597834015226970467984991660194525443390545030589579429355451000530207066183663546008788089499000693666149798309193582397362806375183253925978568739121687905929758673809700914968404948833802947092865052945909088443527258623164241799112865733180008485103401135633397395929263876216746079833954957774489540973567276000507806186248318895002779125572292200502590165939005082348345236735234428962711907201377987588960388734697767421764008381185564417221508522064512942422058279625473593148715128262809892709353652846318393519808922361356664316544034534757425315068993264663941403344454352619560959057683605368548431014518804749527015122179474037407457304974272275396228868963440501869278442547871866597483075382412427312577574774653882172799565593782256314409345023467664927133611786358134018524191522653825329406359055654456335765236334503075454372642472001874058969491976325299733001247627691538425700508793096035157717663768456034214333629067049475136803464900757742875029404299783822789056605483434794836788514779556383173362000217577183915057876366099178759998741302686670642586398895142396126894879006649795528906937718195032858687687927135621337295031531387314720117068792042920628864819452077773002460639958513740363359076224931286440867888074688937838287500200435133348336358082535544301628330900256461180885852328086493122837186911439360359543837173449360989176085183159277968422426936653163681893755128203975296591251847595472747289043486069335622651117478338379153297676926379924518464383383931356784161254848632317856311874573619789322377709796940568760840645784024745376731240968259946371469978508522153911550676175233502003936283483285703502027233606113183640634611366138324809108219825009219117729590889134975001560821723074383179336709294398514024833992640177498792951271378216411404881997915725751620414089735373327677390889275370089180819711056480189787545715226344462934287798359360751232372467773712973709293877797120957010228617788247349031510297506181967707624125394822658624529614735708757552409660342086199375335624815921513191619726104974600130373536792010732510182242440785401394602008229757345937271070272579179061500074595247727036902422770408634000155364237216278700893891846130216982506591970749424290314606999420469280661134668458129663091192474230962741400014371703661357533732915015293221433844933700126701327180886627976134881759417581453499955450229557129798772969494487505692488044626000928599660378919164057718064403908839817849847915856689583852746812689523157729634340843523941915273313899145324407401362704063931012188295670225562823311844788271775769055083622738514641897884082533251607800594643112653429323712673543824426578190717202678544832229210385388803312455290628805714922242554012093007167636228178104344177858782381913490474927706613044766222316279 + 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196*I; 2148434474.68357749997693726599862325395575869656962128210274353089200584145838388450935630373768269536167385069516231535440939398750772390395745034773145380180740742766225001046735106165468703985006248115105010096956862507173584668752080875744448588578096012630979819017085747239959703180819642380796353245748159215233089445771234487416916265868179209712118279243438785982503105587390220207066415856275936903224716924831171727881308906420497522705854281935374088499752794443033843569481363379176675590793572884715312869709550945474297653583458994490217765311882857083743724439120092051878182990695309210624358429737754352143592738791300303006876661168686768439306885714432523606504435027102478690082688686111865882185685344874909999545983362758565937292439966287074543682685452043905760709159265167661700721654565277179143214010245199677492605963655702705720794971761327745920044697201556584737078832454683308004161067703680844731388476541489091289990010381951593249266170826927365708218289597810189583547473209273750035855772194442540650475687472428984691690253209469766022381595330541021068708088578354255598452397201663689027840352390705092528798518384963649065828364748170053988618895731016517026282800745990115514169425028459958754915911483802262020882465089035265984688163232103702304357566865043881407761805494213248600882622396686719005462364578301918807186235426532033475415829339605323030622468048282371476429393911573501356886413427385553164726669850770577221917854720911062491490457002134530696920706066330284844275456082483844093116881571791389917970440293739359348930511008425215443705094298031294304229647761801865212598963123252546541368214339957072204592918597140640481189239662470575828458722550800791241539482509565475401024361989086657584610386782275160756821596207134067978688226790081473229574964813365006481542898134359604739282395632807299415973385849422709351230146273976493306722530002436680004597846030910664816129834031820680554384888753423128262093515660967479506540500131402241435710845293724442503889753579259544222775105977083144087947744110181461880003131320285644111460894170127333970418814331381942245892396929183133353385629810601742287594073443838449443471424925870620928728619254966283971020669124416913551468045616297779870592514859670930142583359785872395486334498185380212852846980718350175995723669766796507785019443396962522750596947357902233499256286579073562085587044912589554778103987330689817391057411981803750697183663432740393949413233470355481969481233655294812030147628300826563080013923966414865998042405779464180418609709893173213256523900593172497669582582049690490727201241515107455704523158226945143861853006308921651903755777671727057272700174990924473698564031857508680789380320131845847232370482546036890800415103158174018885653283004982235664718478027174145526104043453224618281003804813414535615297623926316626863659828041143457059844218442357364468406237108816610595359399623743898045141919395478240510147995170115957853443724564283588660 + 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196*I, 7030381206.52015237037591698036680242465558514091205016631447753794411714841307627245005302305808097294581309032008758798037233360126501629992986824997778142314190302246779076613374891788673823305128327918848105109553077810071667069615512827732310892308545934140088843103553994066546089958007854089081385822537917374956295720635782368152997063715792145880158370278542525238870405010395039135044713687039931702768879210854359027176476094638645817147531945454006931338103827006123964974367171485665400897139045412385808721921110702786408293048289636708651280675321204831230989596012769458887317443416586875000479620960234585734944896147580504664789717431417083557409308575326553732700663839890707901551968834821116781666905621002829457035264034436400231557224854975012183353942702896015669044746540905064656600608053617948663406313922174866319332318046862484373293393676562284602423871018172185064248264566337010223483977304728825002751081670475377072080177180649919253789416693650193652418102089066712721459256077623559435877330012090541547916445142476936479595659327499140114031084834785534099896851153882365047730900528186786061317278932363063823719051303296120627742206840154867083821545680646757108464551947030056832768995135080478562396056876068027699834537218850652427987015328996027555333049813909333854586462866288335478273649871684808075720087210634012186982975193190421693485832282033223099770473954400856529232903802237806959585427079050403129198736105147181925188790733632588108714514950422747890105653335885680761024082840954569052090456925001634961439453667803509555308979387910557610633619792623153849910561604753527945660599431519618572753570541165075467492427011126143652686810737669829469210508352841309882269781905980642474989164566809051300187891837945070154741555280738095735737254001740525680678082425861605490753709726392503971155004083357958336016790130079717917513879779170669808217111490249597313133253633976466320402089755088761958395437936654750404669215913697694467078965417173398839138069372528962954269014484871080385619924286336091789818624820423213096960125390543909127477745508836167862692529282070058939456840219147945636041434939503568370569283114647728735618368434308876662716775510218135029276821124233747940528926502563315197376395646383478821407554132882311181628820460602220045396793120833294056561128395249274816133413578364331302400330381876591150584326251661133931827306802070931967708713716607458294197106727851747193251055766730390074182195718748603828247764386726262739202806225186247260183852017992489266381214718995136996942287944065862739636923542683361918612300382932188448957176700305345647277403442073985518993352257592526795931530915274926760533532249967580524217903530847984407871500524312020211039099844312860349296725117885296660691596593394995729487638381812072630561709070695250489290371316800091369417871893468078704675945333448788579670230852516705198975808534762963513599808915335332105019388223758028045447985483739874552449600114045947292 + 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196*I; -5564922388.12490039443008726733099071824653501342375735358083191520175230761861532748206991990836583204933945847467559697391164290140657271767110091188633486321499877558601543407410436846943795551352694875481890619989043883381130036369123363212595343382398833458652782975404446850539253470605087794965442781740135942271051744046333641230730588719342903122686157549614369453923048558575217751064554779355236472448009278193183945411044179103126007121390432822365936987043220076549841723816586077149462127649305481055956683807134120407433275690165627658704400451615405747866398192428096469383219939370865414654790833569163416406411359424765101071248607776709460736836492069336582908478817197059429086213831310197865998896895713740705650780068030258332879444989998306940429547169062963172122767597138671848102712738271517636446957716604348127276225945936509442180623222033773956976336653352974388311026877655582378176016242635276379186291638889506542845946581951083522853169430303101209362304676326955602243925470760471372049484928094686375231611502751007462786398297314719939605065216738097023415741605632121551514371125213726722528551281171840647518585740108704145632110167434991966439184955633207218498714711702034817668410413882468151234369848346359892631650136160448289439452761116305617884129583909982704433048310605844941381629185111046174781740999139542630509008952430618540365292535520936144233551133190895483380504001432907676321298736955995676748341618955707278131946796233622589407325179273051949059382361002021155260654948770867058369061534817129219419728469834274121082296171605339227419471600667666160365238500481853265593090132802400766921681277996260902886018580574450878140834639870853781008410313081260810639080698660328566178169536436113076549664833996612575675238498190995713258620509856645998032391857943044277731522681904225578778814874366107975027875270282461831463292267778772538726644055019755113519623751005066617557512377443723176704572407931255840428347999536660092748972290103010435601560307248129964999183041957563008817171656194357138848035322391115400464783863510830647287226211029815847250170744486066845386876645154895554765474937977692701312974980602154103434890279321599403956075814624723340481801647652312877157156666416904811405048152009770385494808203555011629634863909315681052970399275761100478628815276344500777214829525162056276165474484512978977729043597911024013386955645906493111856773945551490149342012779451157503824805224661778313853109155032777701714366901796662250156770349526549241177465971360753673689661122456922220565859666698132399893562767609417918689430718258923021485439015031661608018743175809711174120852684120153368402798522342633481549869483731749427596412320771171325392330142408589513090095211803852361059395512884828420472495016660822632661368630210956242517868139067743551408019422044694582366790361339230723572725533210409535356784956186035510013843538237218849880764859511452905311152713407525360561787996544924272089656656414464973492 + 2.1611134580944506156 E-9302*I, -2785652820.15607456257379407241540335972200706186491264818829963918006622240475278654261444545818192536729641599205389742168632035973704226547526014571075976696709740960051669907416334698231239240233211733730507275537850839603682077955318302288920347277956354710733392103023787000362426411999065999582385128871767576647102138238419561777813809789813577141036682372612766565060704095426634186210910739947066649822970122410831768553311852839532951414351936968903530202470429610194701098150425405831445939364555871412241445920602896600159974153286857583078988474818614665291984513664424222152083014453874967799101633371274197000247128725816496283604153014195575035344795632904495453075190246741992773289158942111763128820587227483020534673907370119856197022467429659943190089278761492671214692126979946006972995239505186934144601564395159744139858280639405179399021118280333415638983369148893742516376397968853934841071549992151250228097199497675811478297920866240574230321751766516581866059968070542521198805430748217200380222873676325305213413369688104294007593785268529648137705785101784286472205312728181856254634865370469122292861244718029434756669576166492655726984463965125462784037722891590151625029757110241542053212611961718478344818872961010151333735358458851911125300344686409628660190653687014454847936667337381397760078617012997120148584465873338980655595660473073352901442911653168403647692700951940216570719163438878730734654140638182515054509798266859681724753657385296230026178970648794416989849192154999828432937589718117382140651096565457797787990092678627424372149701419488130673980456110729398721706586308162276098065126684230575086684234918513957989154047857828466726306886219205446085279151568680055033637464049668767901369375244431341503247323077104424370716809904006854767477307630270547172155928514310929315520207722456220487869300581330724729903606489445106551375554970062449983207892372520006423998278632415644597327706575752052663996923911820757764491717120746423088862554012291400923412317752114873218895686807480191110249835105516380733338435032877497870615662456256110768116994276463700088979555572776181142335883208919327847794085907993270864387315407023603340795709809779261927008017957808474687190621748898123124607413310943589092401795516009942029396821622700068740843419066000211815639447183562223783981949333749200220885686541461908531991696381721226913368047550767242085697089819564339996959289426292851294776637447190612524792926103639197599951232977348589456544103029192529824187513003752402326483725316665308379753238584113377579360834444110412510079793743910392424124794690444143822956248100644966728113345724009581610153534407744610939241947062528114071010374520333239680693961615574670508726176116910657506975168832124564679071162294573451872419820824339912106749123739914188548028457462894655846177717887476378695874047466889887987473266788616559369284842049204249908347002819840720959587715908167695876841283879580169263066071993264946845836555347823631013 + 4.527048448992643139 E-9302*I];
    log_lattice = process_complex_loglattice(G1, logarithm_lattice_c);

    delta_K = ((2/Pi)^G1.r2)*abs(G1.disc)^(1/2);

    extra_log_coords = vector(length(log_lattice), i, extra_log_coordinate(G1.r1, G1.r2, log_lattice[,i]));
    extended_llattice = matconcat([log_lattice; extra_log_coords]);

    cpct_rep= compact_rep_full_input(G1, extended_llattice[,1], O_K, eps);
    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_rep)[1..r], log_lattice[,1], eps);
    cpct_rep= compact_rep_full_input(G1, extended_llattice[,2], O_K, eps);
    GP_ASSERT_VEC_NEAR(log_from_cpct(G1, cpct_rep)[1..r], log_lattice[,2], eps);

    cpct_units = cpct_from_loglattice(G1, log_lattice, eps);
    GP_ASSERT_MAT_NEAR(log_lattice, log_lattice_from_compact_set(G1, cpct_units), eps);
}

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\ Second test case of conversion from loglattice to cpct representations
\\ cpct_from_loglattice log_lattice_from_compact_set
{
    print("--Cpct Rep: test case - lattice conversion and back 2 ");
    my(G1, G2, O_K, n, r, logarithm_lattice_c, cpct_rep,
        log_lattice, cpct_units, eps = 10^(-20)
    );
    default(realprecision, 1000);
    G1 = nfinit(x^5 - 15*x^4 + 56*x^3 - 65*x^2 + 48*x - 15);
    \\ disc = 3775823795898978972166892739185847878552
    n = poldegree(G1.pol); r= G1.r1 +G1.r2-1;
    O_K = matid(n);
    logarithm_lattice_c = [13.10366530105833527456106207493511562023480511936468281611546675944186236386391363970843797050917177441487489607358940368260061475752436445272735136640926471773914037883192136483462994992078400069781741091369244726120609808238483543197731012518181704213405560043880299893954653504622354523250070091977359352075983704386027803844143734086112918998845017832095899678193101536368392702595530878952306089171622016905643829795527978390831761114053513606162219887413538242876201023401016371121732417041531143895751061618738390005027764651490602291591887958700208184184325095020687341247092530942266989038755059385179433565750193060888109041038606835468700224385837331698997879348686218626285640916305830486434298788191896372604187659819522162832067873928229507564032383831038894695084111481954372652080631719317790443663782480754928586434802068340411030814579275669120178341676038770480662105953193783471005669552443493853623240765025972072167394023248540873805629649513167823762699926845320046504170048412 + 2.578722954182199287 E-1020*I, 3.839271411358650695152541525990170236663824515774991193352129395753417916541049516844604725114327552425162233526016455275595698063366669043708266577133410301945170243703157345143700473033349926823018019255506869076421048923753320079327091913268750434770734413985485129140981707133477164189378538798580165093504898175427492215902361223026477288852074463384517468034535160617544317683079243412844657395442607580890574880052013423475753175265762879188999773897911785597725883695563586438315863627585946891320550247400557957903513195610125854971433553317815067410424372490472181936248551744137882980640743690551075564236534308532723476208187922407907274538763746348024336232829076366184620888390754355011826851790297895155316742180415526042869084410577055939193309637200635874132706722755938681858071212392250609253307792686483977600474257084060402025873751438756954513287450427425085195689684058972955947396525602820300033665024439811166524974422908323110318295411834957211071863084111038252748326964402 + 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420199*I, 20.68882227729602688617070469412952146932400136579185466267088599034706596177962920474912080106104681210084450320680689125379082457066160908759168606674798865152737452485743729181544709170986046005631247469301361081494228351300481379736252612617911331922639586860974848293497617924974076654463558637150165654993988054717904345109228289783234169397638433340917910284875792012998526972391572822420597956259094257548140230936031392902378194178623454615579984869989943093260930408363369751304002443304495946412563478751129534957666620495893439888606383942681059363534471668359734337265948669308712832233605011457198051685395282870663706609579708039604562848203885228618776062813308698515967600060142067836740218422851929225497710209396849456615469944457608724527906485146517451349899532461104290603000804643268836305690930211837961087011216354025705306845466843159985279516217124990390336881331917518197461359830103638393779327952113186487939999754477297115203738572060427103522624771407482623498703913361 - 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420199*I; 2.932931306323273168726599148875086205494599844169013197986874490694462166804722806165807683402006616541903045957742987685341422983825485099830940177167898862155810950434396164366694499732946053054256191624196207156421119760953387514558102213745663391042009083974235136466566108301168246266302121850435345162511590925258166907609829899295832427766255742254988917810193779677553519572350460272620216132023468059101626006392848630025078151948747422633537617283172648668312273778473941218551248516548832000595228770745337269753401792475098632775199363504292084166924090209796402286326000662030037049577056186202649737940015392026529406459872998575816504157306371889538487354784007778239255250122354825881778745003982305366871468060357821718081592836138933597781914203456403741954583049932723840767308030075718160372390277476663617678154008606145515974733001104091981427185112751797292930492948771310066605194309484865032172970038119424230617213520359724380108547538803859880631727345452346295143785191284 - 2.578722954182199287 E-1020*I, -20.38004926338690343100499928064211395140748453968284613902732318564669319213785970021856304086945547119171481594693983397311006473161427027258530135371711487146160990231241611687381810350889255372526642862259471105108371800688598986814543977177363411113941031941181409101977206740220974977725656325801196297585091661281778506851725677957123582157339488007219991911555247954988250505969022252542806188233271833337495488918508576347102371822457252240030238403297573926602863361532406959625116159496935429601185171258883056925646505305190128616239231320263266858110370004526398559866730371259863237249819950129597684433219442796176863417316136340234622766540282451827537880307329270065318079436909689875968941326089190608290485429717146602627645101080570705808901965403500440522063922710599256370847965659875425049775371828056793930530230690054421272465008923679695695618459231414473378415818371705957729724209807445922759134984027199255225455218282245122975816572031402866942921505413668940899412848206, 0.2066984512900620758625554988419461072137046090761043799763298154785769155303318268693806866554146342099653893704736879233320531423018083295123227701061402086109399204905045832487937209988554522960226124518536771383439570750516257732359893135958552662152804831617194080761531078087709412265825005749690466820693345745411846185079523737870135323117962094614573174810222477339681526376557555050501627033286389778024689287357566607094581797708661556666002184420904174856240418731834417573052096438490073089208043441898143592673773783398140191687872133230285930490825926776394826989279155512167517315200678934767520057120120848347071468743666239380501135765494067793211565986989760881424293784738841027466522551022626449440456150967762464583836064108410324827156705364510527919604407112377541829334148601764767969060856167492489056113124218446984361519441705020438223455063589040229139038532456878639355734480219454597590918360129339616595863850838297357205932511343037494665632492157474684693638343921040 + 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420199*I; -14.93695739874441289008892699650853442206139805527875112704128064998867482674085811939551182027280591903050408641814930576034102911180715523863729348345105993885339459453885952396554560260071605723712998912366035662511371745549541816529494249425808573392180158665649176739755047074069387488810398051835251366776056079891576669684441016573805724934922492340156963259980980964315018246430053546610021664792323298373343394250457468077220164312857675673539051264413955507661483628126240139291199054217353686185579803570967228454666225908286183661904446151808681658752895978131030610075945744745864498336097291584466270134529112941308886223617006873949867193679363710373082413188018756987762810310854632266891489013752740757825023922882576729649339618712760734736729593342547451157946694122380389084907447310670127696976828779293339663677860021825197062002195661697904116182453867634740240109977258604771431963157666929559141535001794302336357807238621040969284205017180906305008413757581530642540811668791, 1.184114143076524778349049050203850284347405108871773083802856847348794110717208301656861086764744945678160678966502105604203530973655382305006035401293349461724641996806978435241282977029795146263203223604069658774885067431272692491766572066704828413052879388403723763218626614933750258680971957501159328250445446696291034400723487682516400938337024416554194643012846110301525977923076545346026123942243865391863247508646876525444732161068609351761512408439443755190993019671596170258405289685169954496480454505455273985288202221696454642070953282941621058381328631717267883595247629369341688346580693597169535918478870574469475671365213811320472463935736983693729206149108184261415239440102203713251236687998169128585654079766400405468300520524095529131603433395133958654782458988005972519954657401110156642066990684779177173776599524251780551270925159899966312133345620361521754042945740550437072633832075547107180215273153786410302025793330498126727471338294251103263327095736566891520981728835956 + 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420199*I, 20.85897997960409715171466081740468452750956394163211570855134089650084641917755533268354794635601611849922326944780857874712983071996779279389272717130188434486175922766751937004895186620590497990511112906940105531081051755787965253170308643885429884945595275160571378872044816435076242769773722342350984696422943368585424023132437457907510209333246927005676990472347452814401064254893077924512001722338722954800757573626674766087314661039169649174947501589094181512754523254801055411103061629488052344444477065594639210950363333815813225850454557085858286876846667986090763786155543638013176963154804680303678930217200923580845878603170288821881336920577137833163398422389703205758380261387208968507998280806388356058775860695853539480908426294874017499458077509261605700298937633283870009381104736139943166759156273422630865924759354220223581532777282488907144979498310735151709770262301179895198870311165997065545999051264049576484799287435125288053889735978395628907960611352596088661618168043937 + 3.223403692727749108 E-1020*I; -1.099639208637195553198734227301667403668006908254944887061060600147649703927778326478733833638372471926273855613183085607601008629542694313920998060126103641041556734727458005235778847053013996514943613414228297792513500387842804781240469844669394699254263097756546368008562172606697916610698842251856425015510867170202678249206857074418904368405480997174378281992314985398087264134005233596043060375816455244424630361843553733161194119960705801959769303513168476020459447731221703536856582144790606577696941351223048885257017179907142819072073781573207349421238381378692969598037468523994061956603633864209781372252226193222321634634088998191004834464371108102797642016390682394624483556176866808077206842748373861514663105429727276049908875388293621326054942108341318177325957223528463676439039874162194787839259814491279506905723429071297655662856837243804142048777334463154697150452708123097062342258257250507976990027670436121588713081366634723425322793862126475068174589038090240334777368987496 + 4.248681808871583547210796938177185964361477505100864115723160966511618524209846659752569663818120633583363114858545896968496850763949151518325576112960284294293334372358264306033784284822890429112903235373760444859061783395851243040098060344789399696863841717531273866031457153967212493810085729581658870375487227623689805182303247690609064900046464343971009783120679331930002179472173510020143328148358536193039302364165072469894728160817984635799960892341371857329396758211008807276864902839897424757763598846474231043709343375551003197004087910190188322282778083547018763229054021592224169577776318369289785350921524676892763974008717917809588623518717192161936786012393205347277001187929045115739504644860347132854308472056712998294110411508039457129590994114800632925159484004472349497850587190485392898491117427887218358057333045762414302462213439253258906334830166044723091883307483156223152404436827156532440316796414712884634009406730694644449778867759321038547554037299161980599841499614499*I, 15.35666370895172795750340870444809343039625491503608186187233694254448116487960188171709722899038297308839190345442127309331083569459221892387099937529035510779179766180228033648883465344574748063904518576301818319977760165185997729705177579180005526331579651702260519866016374533498232690690606695827246963190057174109925845189140787402835759438429600013348780806817120863081220945353443376655728054464624536062113250048619581455053838189020029144979020169562019847730973024816431289953000828221345290821084695973299862606474963574532078912000547694319654278935069583752392006717112259911906104527676221357536536161678954495956948659975962967396648919090209447652183642113603207305332046587613883049662587347242488234193403235035553451510684607613312198729227662170040987630547351634408136189575104309634699917745524081490678792822852556470325942785117789807369030955152152519789454552275910764954871601349692453174734241166204577108370378442941600139196853201422796819503025623345875963526407268170 + 4.318606439725729408762939880640162889552162429708266923131470730443689156576424120565557216882639746862831023581478422186818445427110036181111581406351632217170002350525255653472274922938730340619729966142074326008023202437717696251471650891101697861412734520163916681456743318316936570639767813972578965699840780454050358681346895641532219227076137383077779277991662840106662058391815638982799280700845839254253375991083331247248157368563421686475312265529452295196274762641404169068286619179896064585583329611891506017352496904085364138049525779730063912523657272826051722344726852487551450329626154377833711816874375339814243969394606428022494920910507281194723774862289168421362933121564709995181490008224414052689799618806202376973503594703414092467653473454055210428836404841278360027469227858685024114257380578436993290069079935479853961517674845742779437454546174262729013782968650238554286956469754132650747938115503568884701765274992822281451270734907786178964256206645791206144870475658926*I, -41.75450070819018611374792101037615210404726991650007475119855670232648929648751636430204943407247756481003316202508915792425270843293121021099673600815601320500007367301546124511319267891462089225744621621426834326409675814593609210230160187862926743489762910337718167973157745140927413546895531036998055019623864880757446830092460985069445731962064981292740632505325469600796406491050226297437615948930681110129144697436281825060638673194879719357187508303293166354577857850482769338137585037177449021749120978764750181834767692145688067655939662360842205545289398922214446393314283862443564968540416481108552182473797414934980299900186659255290911126435963739714290145072909513088590799294739446619403724739466549778678132414928013583362256880415729472257551048053228430844881236868749718277447026800859682755455765309393717572901812758719130454817166382271512493565163750544391497528957666199789889015798295249915687562817456159138697925697985558741152799663886430958139561045578318132053255396508 + 1.839498086548936310441413158183854885537343512598021950408381910139402486579314184711236312843631258083012201260120364356529449433186710734218133443770200649825958197605397833283957234653758653319124306197214920144057033125995494671513403809694428975584264861569721407535855746939895535947696776679080976416923289478284019003986935302262238980310507661442256741960726885869694427498933090497897124183813381413138009688644647937514685489704830379698622060430433787785557707506246071457276872851363056360272822806350453416360692454681437258028008512726105541546415822921749690218398333102713474659057060439701089464308846558048339254551308818464124784545329917405821042672517816402274436005020285568959518817344906010873580542482357714694581646354190828519033342316683713308921650851931040651747492552041166240389227896470849094773338805264238027795925279031208111445124508703084228201917627397336549070606741652971509496674714405795926087595596358829767557986258518422874908144374978911813832142603616*I];
    log_lattice = process_complex_loglattice(G1, logarithm_lattice_c);
    cpct_units = cpct_from_loglattice(G1, log_lattice, eps);
    GP_ASSERT_MAT_NEAR(log_lattice, log_lattice_from_compact_set(G1, cpct_from_loglattice(G1, log_lattice, eps)),eps);
    GP_ASSERT_MAT_NEAR(log_lattice, log_lattice_from_compact_set(G1, cpct_units), eps);
}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
{\\ test giantstep function

    my(G1, G2, O_K, n, r, logarithm_lattice_c, cpct_rep, delta_K,
        log_lattice, cpct_units, eps = 10^(-20)
    );
    G1 = nfinit(x^4 - 63*x^3 + 1511*x^2 - 18407*x + 96112);
    print("--Cpct Rep: test case - giantstep. Signature: ", G1.sign);
    n = poldegree(G1.pol); r= G1.r1 +G1.r2-1;
    O_K = matid(n);
    delta_K = ((2/Pi)^G1.r2)*abs(G1.disc)^(1/2);

    new_minima = giantstep(O_K, [1000,1000], G1, n ,eps);
    new_minima2 = jump_compact(O_K, [1000,1000,-1000], G1, n ,eps);

    \\GP_ASSERT_EQ(new_minima[1], new_minima2[1]);
    GP_ASSERT_TRUE(norml2(new_minima[2]) <= delta_K);
}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
{\\ test reddiv function. This is an example in which the LLL basis of uI
 \\ does not have a minimum as the first basis element
    my(G1, G2, n, r, logarithm_lattice_c, cpct_rep, delta_K, idealmat, uvec,
        log_lattice, cpct_units, eps = 10^(-20)
    );
    print("--Cpct Rep: test case - reduction. Signature: ");
    G1 = nfinit(x^3 - 14105*x^2 + 190241206*x - 1434835874037);
    n = poldegree(G1.pol); r= G1.r1 +G1.r2-1;
    idealmat =
    [1, 0, 5512998124844705338064/8078344704142404472089;
    0, 1,  400989849241203212816/8078344704142404472089;
    0, 0, 1/8078344704142404472089];
    uvec = [159313008.820576934721790381118980083806910541, 7120911.20594078063086462944469944690117925262];

    LLLcoeffmat = [7186829957262695351/8078344704142404472089, 519691674836511290/897593856015822719121, -6786646683055913860/8078344704142404472089;
99203606606426/8078344704142404472089, -101780408781643/897593856015822719121, 29525541364643/8078344704142404472089;
-60657402575/8078344704142404472089, 353725531/897593856015822719121, 61180101772/8078344704142404472089];
    beta = [7186829957262695351/8078344704142404472089, 99203606606426/8078344704142404472089, -60657402575/8078344704142404472089]~;

    \\ confirms that the 3rd basis element is actually located in the normed body
    \\ of the first one

    GP_ASSERT_VEC_LT(valuationvec(G1, LLLcoeffmat[,3],column=1), valuationvec(G1, LLLcoeffmat[,1],column=1) ,eps);

    \\ assert that the is_minimum test fails
    GP_ASSERT_FALSE(is_minimum(LLLcoeffmat, beta, G1, eps));
    GP_ASSERT_TRUE(is_minimum(LLLcoeffmat, LLLcoeffmat[,3], G1, eps));
    \\reddiv_compact(idealmat, uvec, G1, G[5][1]);
}

{\\ test invert compact representation and multiply
    print("--Cpct Rep: test case - inversion and multiply.");
    my(G1, G2, O_K, cpct_rep, inverted, n, eps = 10^(-9));
    G1 = nfinit(x^5 - 15*x^4 + 56*x^3 - 65*x^2 + 48*x - 15);
    G2 = bnfinit(x^5 - 15*x^4 + 56*x^3 - 65*x^2 + 48*x - 15);
    n = poldegree(G1.pol);
    O_K = matid(n);
    logarithm_lattice = get_log_lattice_bnf(G2);

    for(i = 1, 20,
        cpct_rep = [List([i]),[1]];
        invert = invert_compact(G1, cpct_rep);
        GP_ASSERT_EQ(invert[1][1], 1);
        GP_ASSERT_EQ(invert[2][1], i);
        GP_ASSERT_EQ(mul_compact(G1, cpct_rep, invert) , [List([1]),[1]] );
        GP_ASSERT_EQ(mul_compact(G1, invert, cpct_rep) , [List([1]),[1]] );
        invert = invert_compact(G1, invert);
        GP_ASSERT_EQ(invert, cpct_rep);
    );

    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    extended_llattice = matconcat([logarithm_lattice; extra_log_coords]);

    for(i=1, length(G2.fu),
        cpct_rep = compact_rep_full_input(G1, extended_llattice[,i]~, O_K , eps, avp=1);
        GP_ASSERT_EQ(compact_reconstruct(G1, cpct_rep[1], cpct_rep[2]), vec_flip_positive(nfalgtobasis(G1, G2.fu[i])) );

        inverted = invert_compact(G1, cpct_rep);
        product = mul_compact(G1, cpct_rep, inverted);
        GP_ASSERT_EQ(compact_reconstruct(G1, product[1], product[2]), 1);
    );
}

{ \\ test cases for compact_rep and cpct_from_loglattice
    my(G1, G2, O_K, n, logarithm_lattice, cpct_rep,cpct_list, eps = 10^(-9));
    G1 = nfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31);
    G2 = bnfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31);
    n = poldegree(G1.pol);
    O_K = matid(n);
    logarithm_lattice = get_log_lattice_bnf(G2);

    for(i = 1, 20,
        cpct_rep = [List([i]),[1]];
        invert = invert_compact(G1, cpct_rep);
        GP_ASSERT_EQ(invert[1][1], 1);
        GP_ASSERT_EQ(invert[2][1], i);
        GP_ASSERT_EQ(mul_compact(G1, cpct_rep, invert) , [List([1]),[1]] );
        GP_ASSERT_EQ(mul_compact(G1, invert, cpct_rep) , [List([1]),[1]] );
        invert = invert_compact(G1, invert);
        GP_ASSERT_EQ(invert, cpct_rep);
    );
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    extended_llattice = matconcat([logarithm_lattice; extra_log_coords]);
    for(i=1, length(G2.fu),
        cpct_rep = compact_rep_full_input(G1, extended_llattice[,i]~, O_K , eps, avp=1);
        inverted = invert_compact(G1, cpct_rep);
        product = mul_compact(G1, cpct_rep, inverted);
        GP_ASSERT_EQ(compact_reconstruct(G1, product[1], product[2]), 1);
    );
}

{
    print("--Cpct Rep Test : 1000 compact representations in a degree 6 field");
    my(G1, G2, O_K, n, logarithm_lattice, cpct_rep,cpct_list, eps = 10^(-9));
    G1 = nfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31); \\ signature 2,2
    G2 = bnfinit(x^6 - 9*x^5 + 40*x^4 - 95*x^3 + 132*x^2 - 101*x + 31);
    n = poldegree(G1.pol);
    O_K = matid(n);
    rank = G1.r1+G1.r2-1;
    logarithm_lattice = get_log_lattice_bnf(G2);
    extra_log_coords = vector(length(logarithm_lattice), i, extra_log_coordinate(G1.r1, G1.r2, logarithm_lattice[,i]));
    extended_llattice = matconcat([logarithm_lattice; extra_log_coords]);


    zerovec = vector(rank, i, 0);
    capvec = vector(rank, i, 10);
    countervec = zerovec; increment_coordinates(~capvec, ~countervec);
    total_time = 0;
    capvec = [1,10,10];
    while(countervec != zerovec,
        log_vector = column_lin_comb(extended_llattice, countervec);
        time_start = getabstime();
        compact_rep_full_input(G1, log_vector, O_K, eps, 1,1);
        time_end = getabstime();
        total_time += (time_end - time_start);
        increment_coordinates(~capvec, ~countervec);
    );

    \\# note that these timings are probably dependent on the computer system
    \\# these timings are based on a personal linux desktop. Adjust if needed
    print("----Time spent: ",total_time, "\n");
    GP_ASSERT_WITHIN_RATIO(total_time, 2800, 0.1);  \\ old timing: 5600 Jan2023


    big_unit = (11^(200))*extended_llattice[,2];
    print("--Cpct Rep: test case - large unit");
    time_start = getabstime();
    compact_rep_full_input(G1, big_unit, O_K, eps, 1, 1);
    time_end = getabstime();
    total_time += (time_end - time_start);
    print("--Time spent: ",total_time);
    \\# note that these timings are probably dependent on the computer system
    \\# these timings are based on a personal linux desktop. Adjust if needed
    GP_ASSERT_WITHIN_RATIO(total_time, 5400, 0.15);
}

{
    print("--Cpct Rep: test case - Slow instance");
    \\\ This is blocking the use of collision_check2, which should regenerates the babystock elements from their logs
    K = nfinit(x^3 + 46*x^2 + 1188*x - 50115);
    \\print("Sign: ", K.sign, "  Log Disc K = ", precision(log(abs(K.disc)),10));
    rank = K.r1+K.r2 -1;
    O_K = matid(poldegree(K.pol));
    idealI = [1, 7/15, 2/15; 0, 1/15, 1/60; 0, 0, 1/60];
    GP_ASSERT_TRUE(check_ideal_reduced(K,idealI));
    minima_log = [-79.52467739064149897915521144256478187720261777135775275592590392467599353174402354871259680758462182345330502892968935896300664012414927128702402114868164062500000000000000000000,
    2*43.1635360769829048649908424128892808508499009321350992754371391316717261637843958634880003464571566631011144291805688502638993497839692281559109687805175781250000000000000000000000];

    \\[-79.524677390641498979155211442564781877202617771361888392885097233928656039614443794032615095049170274292811009641293407281666210969359472421285352382868781967095862388134724868004120031774674049308643743895568826060785175731729997259316330145181418113243185067256304432519009437631559071908339611471778796247403475890558928414394398638309970902233715196080626667281982446892787229718292245859343796694677791, \\43.163536076982904864990842412889280850849900932132466624210570851569394922703183344125920507427915524276343317928890818016610635175693062788361765431300450083634001171576298482025233609557931183086457947573545702284167025946981892264411325126112832946299167029849414931998545555260813883711610523331293077620243529968879997290054287906033130704074628262268977931198000813282364858607381478137316194276427522]

    compactTracking = List([[[List([1, 1]), [1, 1]], 114], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-35, 1, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-247/9, -13/45, 1/45]~, 1], [[1, 0, 0]~, 1], [[37/171, -17/912, 1/2736]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-1223/405, 109/2025, 2/2025]~, 1], [[-38560/25703, 392/25703, 13/25703]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-8593/14107, -153/14107, 11/14107]~, 1], [[1, 0, 0]~, 1], [[42/19, -151/4560, -1/1520]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[3511/4574, -209/4574, 1/4574]~, 1], [[-35836/25005, 107/8335, 17/25005]~, 1], [[1, 0, 0]~, 1], [[-803/5220, -13/522, 1/5220]~, 1], [[-23/39, -1/520, 1/1560]~, 1], [[1, 0, 0]~, 1], [[-2100/16483, -816/16483, 19/16483]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-13537/14939, -525/14939, 17/14939]~, 1], [[1, 0, 0]~, 1], [[-14/11, 1/33, 0]~, 1], [[1, 0, 0]~, 1], [[102/533, -43/2132, 1/2132]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-1585/6834, 197/3417, -7/6834]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-20750/9181, 501/9181, 1/9181]~, 1], [[635/1893, 19/1262, -1/1893]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[131/141, -91/1128, 1/1128]~, 1], [[-10628/8765, 143/8765, 6/8765]~, 1], [[3277/1973, -377/19730, -11/19730]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-6286/6249, -21/2083, 5/6249]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-1543/110, -1/22, 1/110]~, 1], [[-19004/18327, -184/18327, 13/18327]~, 1], [[1, 0, 0]~, 1], [[-536/2551, -85/5102, 3/5102]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[151/990, -49/990, 1/990]~, 1], [[1, 0, 0]~, 1], [[1899/11791, 267/11791, -8/11791]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[588/1307, -517/6535, 9/6535]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-998/195, -1/10, 1/195]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[4/4355, -75/871, 7/4355]~, 1], [[1, 0, 0]~, 1], [[-301/234, -1/90, 1/1170]~, 1], [[-331/2925, -1/195, 2/2925]~, 1], [[9371/10513, -1244/52565, -7/52565]~, 1], [[1, 0, 0]~, 1], [[6154/10933, -879/21866, 11/21866]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-263/195, -8/39, 1/195]~, 1], [[1, 0, 0]~, 1], [[1, 0, 0]~, 1], [[-44/27, 1/27, 0]~, 1], [[31/2195, 1059/35120, -17/35120]~, 1], [[1, 0, 0]~, 1], [[-263/1755, -8/351, 1/1755]~, 1]]);
    \\print("Input Log ", precision(minima_log, 20));
    verify_generator_with_list(K, idealI, compactTracking);
    GP_ASSERT_NEAR(norml2(trackerLogarithm(K, ~compactTracking, rank)- minima_log), 0, 2^(-10));

    print("--Cpct Rep: test case - old problem case");
    ending_cpct_rep = compact_rep_full_input(K, minima_log, idealI, 10^(-8), 1,1);
    GP_ASSERT_NEAR(norml2(log_from_cpct(K,ending_cpct_rep)- minima_log), 0, 2^(-10));
}

{
    print("--Cpct Rep: test case - collision check");
    \\\# This is blocking the use of collision_check2, which should regenerates the babystock elements from their logs
    K = nfinit(x^4 - 41*x^3 + 587*x^2 - 3427*x + 6773);

    rank = K.r1+K.r2 -1;
    O_K = matid(poldegree(K.pol));
    idealI = [1, 0, 0, 153/245; 0, 1, 0, 8/49; 0, 0, 1, 1/35; 0, 0, 0, 1/245];
    GP_ASSERT_TRUE(check_ideal_reduced(K,idealI));
    minima_log = [2.54776901799963504434000000000000000000, 2.21946832304103985395000000000000000000, 1.51783548444128304166000000000000000000, -0.78381461493723095514000000000000000000];
    cpctList = List([[[List([1, 1]), [1, 1]], 0], [[List([1, 1]), [1, 1]], 3], [[List([1, 1]), [1, 1]], 3], [[1, 0, 0, 0]~, 1], [[1, 0, 0, 0]~, 1], [[33, -4, -2, 1]~, 1], [[214/161, 4/7, 2/23, 3/161]~, 1], [[-14, 0, 1, 0]~, 1], [[-908/811, 167/811, 58/811, -26/811]~, 1], [[271/161, 5/7, -8/23, -12/161]~, 1], [[-2497/1385, -165/277, -143/1385, -34/1385]~, 1], [[-1128/811, 111/811, -78/811, 7/811]~, 1]]);
    verify_generator_with_list(K, idealI, cpctList);
    GP_ASSERT_NEAR(norml2(trackerLogarithm(K,cpctList, K.r1+K.r2-1)- minima_log), 0, 2^(-10));
    ending_cpct_rep = compact_rep_full_input(K, minima_log, idealI, 10^(-8), 1,2);
    GP_ASSERT_NEAR(norml2(log_from_cpct(K,ending_cpct_rep)- minima_log), 0, 2^(-10));
}

{
/*Note that this element is not in OK, which is why it fails

K = nfinit(x^5 - 7*x^4 + 198*x^3 - 4590*x^2 + 16754*x - 86817);
O_K = matid(poldegree(K.pol));
print("Case 3: log(disc)=", precision(log(K.disc),10));
\\element = [-16366187066269271/1669253678097915817, -814384842541957/1669253678097915817, -197448717903823/3338507356195831634, -21429093735869/3338507356195831634, -1278428892130/1669253678097915817]~;
element = [130616635949463525736257186134400353493276043/43971142765977846567823208041863473291662706581582034436, 275448752748853343870502424600491920992833219/117256380709274257514195221444969262111100550884218758496, 14045341919839801260871029466488687666141091/58628190354637128757097610722484631055550275442109379248, 4309477412166424722868085030603950312521935/175884571063911386271292832167453893166650826326328137744, 2359604739081971666277293669565299553561727/351769142127822772542585664334907786333301652652656275488]~;
\\denom = denominator(element);
\\element *= denom;
element_log = log(abs(nfeltembed(K, element)));
print("Input Log ", precision(element_log, 10));

\\new_precision = prec_compact(poldegree(K.pol), ceil(log(abs(K.disc))/log(2)), normlp(element_log));
default(realbitprecision, 500);
print("precision: ", default(realbitprecision));
alphaOK = idealdiv(K, O_K, element);
returned_element = compact_rep_full_input(K, element_log, alphaOK, 10^(-10), 1,2);
*/

}

default(realprecision, 100);
print("--Testing compact representation functions complete\n")
