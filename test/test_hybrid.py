{
read("src/BabyStepGiantStep.py");
read("src/CompactRepresentation.py");
read("src/bounds.gp");
read("src/PmaxLog.py");
}

{
    print("test hybrid algorithm: ");
    \\ Test 4-0,
    K = nfinit(x^4 - 288*x^3 + 28762*x^2 - 1148039*x + 14252253);
    REQ_REDUCTION(K);
    eps = 1/10^(30);
    default(realbitprecision, 5000);
    lglat = [447.171213249458496122837051368351282353548110336325291613395548411055294975918150655947304058130074214109432585356210076637828510591362935214700200962927531959189634525117678314669187105606345185543458744524323762999881299323211989039810395245675020985835514838327541859921548536469294343014597987035058669014175138492075914648763278796672071977684425608537582899438604446622953854500941861369207741110994784742806368228066890560832330712527561216571604406576012042760705665645995727772172486902140820,484.023971462391063377912010654473002077439779472266898540818573955114076815511885756745530427341538583414133427392102553602281415100908328849456343910611306444610433670841518537290209117638258923742259329794121892578413122799094526954072669010030331806238497721088678272492945912068093145358404724157634954579810506185575147978744506688315379706994090357606947567642549876454494958507800858999008094197950650263368331769042737041008165494399350970775588207537980045876290542439658045309715485130408840,33028.9028495588005838632438835291590503962187195512980356500036345267824961444051736557533282843408826216704325415762408112638602108620545533488755300328330078519518730259011741364150301465986377950935502371085108479035488948271084111555096766485618108124946624094664734864354747226446054682707566147136086173771685854075195740271449144814313054537099661868989055618583075752150591078144356228890946211863343155096733221253456473592478192827008503968358497573531343583683953725066294489184793161519309;
    -872.670069560484654981134227301325319765350626606707407177179486519241439718213178239088050481432809872067852385587093465314760967822205139614387051342168608360833259445262848303623367351226000168561919132679960894421917328915408759364659448179312588734274178260203982181157720786666137895899379617326821450314967552877656479709209245032895389712561607805217884547726222762242944513821811494262058421309646507040179914767010667306395394860032265487634683309946449731264031003639909831888595197964392780, -409.794024506154010783145019386963167033076122525573703327130772080747323548362637078262984754091531982910877473234071876936763202790311525549635891975754959785687230722651578000988859876555350288060356426925428503054586825041727528456034662846964454272613622325073736789926083539083772256217734667684853611434800631340337128901099414933094254039074773454570303509692071472931909840344085076584485737649948332553916377793387979353985349258108050893106151781887402006905599686594294601900696107471931310, -29146.5796338532523964050948485816362701878266690287940416362855134915904848317623513998414391127614980190643925520339314142361906193440741194393235232251006847959631198957476962754222241207188114775731982433515654897096286629568502940695226557692769415774496405361281459576948414379628940580133810890851446082972790310457454774158400359154048893113770885205365445941612636016984456635157247052238212794402061906386320228768303911125547254973843464238777582692231849251309273236989450988900836319585023; 24.1800508910971507333206030848646124235734757573931920024655686735638904631137352706957254763312323148504139528215019164144827549692320752533241499100000460921864180993326512715009596321697655260902294353318280397678570316317531204067058175118849406870151669178823536549723231986158115051370484805007002983040392160749592571410181745197379047212002573344601300245147148646342495464068999773855665566979726001768396144175421056448221524168542736475547428005644245261691061643078686468499957930777563380, 714.971459231596447058573351542323306646333439069567977098011863408662623205158241643739739142387424651165507677988472274216199603869862720810198290644326369530229529699230058847778833327011438090756001814909191280800337783352854712304388762426006628879920149844082385399529439442910450848030177282985631612693607005409199438956366285925365033325572419807567755443722169789477607961214050912341807954920024469115497527074228178917585032133776258820629523052118986592081170989877476758925036194908074671, 50733.8445310272586717227834545416711076044691732765920982939373867870284888829028795820433031398435013674448425877637320787926732353688730809301231256689093062239499908669860521485094473606254603560258658765806860949957542316798791353187997943849072699999897895789812993597396681646442579276633347325410911817008085636023656499226281698288576278800776012672788857712748345940897468005800631794210330782713646584409743029855520072158553816630826817203150626849252277405346726839064293496418582010829791];
    unitvector_cpct = cpct_from_loglattice(K, lglat, eps);
    balanceB = 402682.69017;
    tbefore = getabstime();
    pohst_out_lattice = log_pohst_pari(K, lglat, unitvector_cpct, balanceB, eps);
    stage1_units = cpct_from_loglattice(K, pohst_out_lattice,eps);
    tafter = getabstime();
    GP_ASSERT_NEAR(tafter-tbefore, 11786, 11786*0.15);
    print("Pmax step done ", tafter-tbefore);
    scaling_variable = 10; \\ this is the size of the babystock
    scanBallRadius = 0.3314981968;
    REQ_BSGS = 4095;
    timeout = 43200000;
    OUTFILE1 = "data/test-hybrid-log.txt";
    tbefore = getabstime();
    bsgs_output= bsgs(K,stage1_units, balanceB, scaling_variable, bitprecision(scanBallRadius, REQ_BSGS), eps,REQ_BSGS, OUTFILE1, [timeout]);
    tafter = getabstime();
    print("BSGS time: ", tafter-tbefore );
}
