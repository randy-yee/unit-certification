In order to use the function pari_prime_check, which performs a relatively fast heuristic index divisor check, 
an extra function needs to be added to the pari library.

There are surely better ways to do this, but one approach is as follows:

1) Paste the function from the file buch3-insert.c into pari's buch3.c 
located in src/basemath
 
2) In src/headers/paridecl.h paste the following line: 
GEN     pari_prime_check(GEN nf, GEN beta, GEN prim, GEN bad, GEN cpct);
into the buch3.c header section.
 
3) In src/language/init.h paste the line 
{"pari_prime_check",0,(void*)pari_prime_check,10,"GGGGG","pari_prime_check(nf,beta, prim,bad, cpct): primecertify. Uses matrix relations to check prime does not divide index. Returns 1 if successful, 0 after 2r ideals have been considered without success"}
into the appropriate alphabetical spot

Once complete, build pari (probably you want to do so locally) and everything should work.

Some of the gp files are given file extension .py as the python syntax highlighting is relatively close
.
The AllTest.gp and experiment- files are samples for how to make use of the functions within.
Experiment files read in precomputed log lattice data from the input folder in order to avoid having to execute bnfinit for large discriminant input.

Please contact me if there are any bugs and I will do my best to address them, thank you!

